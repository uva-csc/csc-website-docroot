<?php

/**
 * @file
 * Module file which implements some changes on core form.
 */

/**
 * Implements hook_help().
 */
function image_export_import_help($path, $arg) {
  switch ($path) {
    case 'admin/help#image_export_import':
      $output = '<p>' . t('In the help of this module, user can create/update node for selected image field (single value field as well as multi value) with ALT and Title. User can also create new node (with Title, Body fields) and attach images with new nodes.') . '</p>';
      $output .= '<p>' . t('User can also export nodes for selected image field in csv file with respected columns (nid, node_title, image_name (Pipe separated incase of multiple),IMG_alt, IMG_title, summary, body).') . '</p>';

      $output .= '<p>' . t('Body field is optional in csv.If user will check "Body and Summary" option on form then body will export in csv.') . '</p>';

      $output .= '<p>' . t('User can also delete unused files from CMS. after installation goes to "/admin/content/unused-files" page, and see all unused file in cms.') . '</p>';

      $output .= '<p><strong>How to Use:</strong> </p><p>' . t('User need to execute export operation first, after that you got csv file which have following columns (Nid, Node_Title, Image_file_name (Pipe separated in case of multi value)). and all images backuped under
  "sites/default/files/migrate_images" directory automatically.') . '</p>';

      $output .= '<p>' . t('Then you need to update existing csv file with image_filename, image_alt, image_title in csv file, and execute import operation with updated file. Please upload images zip file for new images.') . '</p>';

      $output .= '<p>' . t('Admin can truncate/delete "sites/default/files/migrate_images" directory manually after export/import/delete operation for reduce server space.') . '</p>';

      $output .= '<p><strong>FOR EXPORT:</strong> </p><p>' . t('Using export operation user will got a csv file which have following columns (Nid, Node_Title, Image_file_name (Pipe separated in case of multi value)). Images will automatically exported under "sites/default/files/migrate_images" directory.') . '</p>';

      $output .= '<p>' . t('If user will check "Body and Summary" option on form then body will export in csv.') . '</p>';

      $output .= '<p><strong style="color:red !important;">FOR IMPORT:</strong> </p><p>' . t('  CSV columns order should be as per exported csv (got from export operation),
  Please do not change CSV file column order, Please use exported CSV file
  and update content in this file to Export operation.') . '</p>';

      $output .= '<p><strong>Update existing node:</strong> </p><p>' . t('User can update exiting image, just update image name, Alt, title (pipe(|)
  separated in case of multi value).') . '</p>';

      $output .= '<p><strong>Create new node :</strong> </p><p>' . t('User can create new node and attached images with node, for that just use exported CSV and add new row in csv and leave empty NID column for new node. Just check "Create new node" option during image import, it\'s required for new node creation.') . '</p>';

      $output .= '<p><strong>Body and Summary :</strong> </p><p>' . t('User can update body and summary for new node as well as existing node, For that need to check "Body and Summary" option during import.') . '</p>';

      $output .= '<p><strong>Note:</strong> </p>';
      $output .= '<p>' . t('(1) Select multiple images files and compress directly, means do not compress image folder.Otherwise node will not create/update.') . '</p>';
      $output .= '<p>' . t('(2) If your CSV file have new row (empty NID column), Then use one time import operation with this CSV file, Otherwise due to empty NID column duplicate node will create in CMS.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 *
 * Set up the URLs (menu entries) for the file examples.
 */
function image_export_import_menu() {
  $items['admin/content/import-files'] = array(
    'title' => 'Manage Image files',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'image_export_import_bulk_import_images_form',
    ),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('image media import export'),
    'file' => 'import_files.pages.inc',
    'description' => 'Bulk Import/Export images to node with their field.',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function image_export_import_permission() {
  return array(
    'image media import export' => array(
      'title' => t('Image Media Import Export'),
    ),
  );
}

/**
 * This function runs the batch processing and creates terms.
 */
function image_export_import_image_from_csv($row, &$context) {
  global $user;
  // Public static function importImageFromCsv($row, &$context) {.
  $operation_details = '';
  $body_value = !empty($row['data'][6]) ? html_entity_decode($row['data'][6]) : '';
  $body_summary = !empty($row['data'][5]) ? html_entity_decode($row['data'][5]) : '';
  // Check title field not empty.
  if (!empty($row['data'][0])) {
    // Check exiting node in CMS.
    $nid = image_export_import_check_exiting_node($row['data'][0], $row['content_type'], 'nid');
    $node = node_load($nid);
    // Update node title and body after user confirmation.
    if (!empty($node)) {
      node_object_prepare($node);
      $node->title = decode_entities($row['data'][1]);
      if (!empty($row['save_body']) && !empty($body_value)) {
        $node->body[LANGUAGE_NONE][0]['value'] = $body_value;
        $node->body[LANGUAGE_NONE][0]['summary'] = $body_summary;
        $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
      }
      // Check image name in CMS.
      if (!empty($row['data'][2])) {
        $media_image = image_export_import_upload_offers_media($row['data'][2], $row['data'][3], $row['data'][4]);
        // Check image exists or not.
        if (!empty($media_image)) {
          // Update image field in content type.
          $image_field_name = $row['image_field'];
          $node->{$image_field_name}[LANGUAGE_NONE] = $media_image;
        }
      }
      // Save node object with updated value.
      $operation_details = ' updated successfully.';
      node_save($node);
    }
  }
  elseif ((empty($row['data'][0]) && !empty($row['data'][1])) && !empty($row['new_node'])) {
    // Check node exists or not in CMS.
    $nid = image_export_import_check_exiting_node($row['data'][1], $row['content_type'], 'title');
    if (!empty($row['data'][2]) && empty($nid)) {
      // Update image field for offer data.
      $media_image = image_export_import_upload_offers_media($row['data'][2], $row['data'][3], $row['data'][4]);
      if (!empty($media_image)) {
        $image_field_name = $row['image_field'];
        $content_type = $row['content_type'];
        // Create new node.
        $node = new stdClass();
        $node->title = decode_entities($row['data'][1]);
        $node->type = $content_type;
        // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
        node_object_prepare($node);
        $node->body[LANGUAGE_NONE][0] = [
          'value' => $body_value,
          'summary' => $body_summary,
          'format' => 'full_html',
        ];
        $node->{$image_field_name}[LANGUAGE_NONE] = $media_image;
        $node->uid = $user->uid;
        $node->status = 1;
        $node->active = 1;
        $operation_details = ' imported successfully.';
        // Prepare node for saving.
        $node = node_submit($node);
        node_save($node);
      }
    }
  }

  $context['message'] = t('Running Batch "@id" @details', ['@id' => $row['data'][1], '@details' => $operation_details]
  );
  $context['results'] = $row['result'];
}

/**
 * Check exiting node in CMS.
 *
 * @param mixed $item_code
 *   Nid is here.
 * @param mixed $node_type
 *   Node type name.
 * @param mixed $field_name
 *   Image field name.
 *
 * @return mixed
 *   Return nid
 */
function image_export_import_check_exiting_node($item_code, $node_type, $field_name) {
  // Sample data. This can be fetched from mysql too.
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $node_type)
    ->propertyCondition($field_name, $item_code)
    ->range(0, 1)
    ->execute();
  if (!empty($entities['node'])) {
    return key($entities['node']);
  }
}

/**
 * Create and update Media Image content.
 *
 * @param mixed $file_name
 *   Name of image file.
 * @param mixed $alt
 *   Alt tag of image.
 * @param mixed $title
 *   Title tag of image.
 *
 * @return mixed
 *   Return Media object.
 */
function image_export_import_upload_offers_media($file_name, $alt, $title) {
  // Get local image directory path. field_offer_media.
  $multi_image = explode('|', $file_name);
  $multi_alt = explode('|', $alt);
  $multi_title = explode('|', $title);
  if (count($multi_image) >= 1) {
    $i = 0;
    foreach ($multi_image as $value) {
      $image_local_dir = file_stream_wrapper_get_instance_by_uri("public://migrate_images");
      // Save Image in local from remote data.
      $data = file_get_contents($image_local_dir->realpath() . "/" . $value);
      if (!empty($data)) {
        $file = file_save_data($data, "public://" . $value, FILE_EXISTS_RENAME);
        // Check exiting media entity for this node.
        $media_image[$i] = [
          'fid' => $file->fid,
          'alt' => !empty($multi_alt[$i]) ? decode_entities($multi_alt[$i]) : "",
          'title' => !empty($multi_title[$i]) ? decode_entities($multi_title[$i]) : "",
        ];
      }
      $i++;
    }
    return $media_image;
  }
}

/**
 * Batch finish callback.
 */
function image_export_import_csv_finished_callback($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed.
    drupal_set_message(t('%final results processed.', array('%final' => $results)));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    drupal_set_message(t('Finished with an error.'), 'error');
  }
}
